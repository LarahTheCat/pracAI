Q 2. Write a PROLOG program to implement conc(L1, L2, L3) where L2 is the list to be
appended with L1 to get the resulted list L3.


con([], L2, L2).


con([H|T], L2, [H|L3]) :-
    con(T, L2, L3).


run :-
    write('Enter the first list (L1): '),
    read(L1),
    write('Enter the second list (L2): '),
    read(L2),
    con(L1, L2, L3),
    write('The result of appending L2 to L1 is: '),
    write(L3), nl.


Q 3. Write a PROLOG program to implement reverse(L, R) where List L is original and List
R is the reversed list.


reverse([], []).


reverse([H|T], R) :-
    reverse(T, RevT),      
    append(RevT, [H], R).  


run:-
    write('Enter the list to be reversed: '),
    read(L1),
    reverse(L1,L2),
    write('Reversed list: '),
    write(L2).


Q 14. Write a PROLOG program to implement insert(I, N, L, R) that inserts an item I into
Nth position of list L to generate a list R.


insert(I, 1, L, [I|L]).


insert(I, N, [H|T], [H|R]) :-
    N > 1,
    N1 is N - 1,
    insert(I, N1, T, R).


start :-
    write('Enter list (as a Prolog list, e.g., [1,2,3,4]): '),
    read(List),
    write('Enter element to insert: '),
    read(Item),
    write('Enter position to insert at: '),
    read(Position),
    (   insert(Item, Position, List, Result) ->
        write('Updated list: '), write(Result)
    ;   write('Invalid input or position out of range.')
    ), nl.


Q 15. Write a PROLOG program to implement delete(N, L, R) that removes the element on
Nth position from a list L to generate a list R.


delete(1, [_|T], T).


delete(N, [H|T], [H|R]) :-
    N > 1,
    N1 is N - 1,
    delete(N1, T, R).


start :-
    write('Enter list (as a Prolog list, e.g., [1,2,3,4]): '),
    read(List),
    write('Enter position to delete from: '),
    read(Position),
    (   delete(Position, List, Result) ->
        write('Updated list: '), write(Result)
    ;   write('Invalid input or position out of range.')
    ), nl.
